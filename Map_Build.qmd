---
title: "7462_Assignment_8"
author: "Abby Vogel"
format: html
editor: visual
---


```{r setup, include=FALSE}
library(tidyverse)
library(gt)
library(plotly)
library(osmdata)
library(tidycensus)
library(sf)
library(ggmap)
library(ggthemes)

#get API key
api_key <- Sys.getenv("MAPS_API_KEY")

#Working directory for .RMD
knitr::opts_knit$set(echo = TRUE,
                     root.dir = rprojroot::find_rstudio_root_file())

#Controlling figure output in markdown
knitr::opts_chunk$set(
#  fig.height =   
  fig.width = 6,
#  fig.asp = .5,
  out.width = "90%",
#  out.height = 
 fig.align  = "center",
  cache = FALSE,
  eval  = TRUE,
  echo  = FALSE,
  warning = FALSE
)

#Set Theme for ggplot2
theme_set(theme_bw() + theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom"))

#Set Scientific notation output and decimal places for knitr
options(scipen = 999)
options(digits = 4)
options(dplyr.summarise.inform = FALSE)
```

```{r data_prep, echo = FALSE}
#get hennepin base map for chart B
hen.box <- getbb("hennepin")
hen.basemap <- get_map(
  location = hen.box,
  source = "stamen",
  maptype = "terrain",
  crop = TRUE)
henn.outline <- getbb("hennepin", format_out = "polygon")[[1]] %>%
  as_tibble() %>%
  rename(longitude = V1, latitude = V2)

##Prep data for chart B

#Loading variable dictionary
vars <- load_variables(year = 2020, dataset = "acs5", cache = TRUE)
#vars <- filter(vars,
#               geography == "block group")


#Load and clean ACS data
hennepin.df <- get_acs(
  state = "MN",
  variables = c("B17017_001", "B01003_001"), #codes for total poverty & total popn
  county = "Hennepin",
  geography = "tract",
  year = 2020,
  geometry = TRUE,
  cache_table = TRUE)

```

### Chart B: Please create 1 `ggplotly` of Hennepin County using `sf`, `ggmap`, `tidycensus`, `ggplot`, and `plotly`; which describes a **Census Blockgroup** level 2020 American Community Survey (ACS) estimate/feature of your choosing.

```{r hennmap_prep, message = FALSE}
hennepin.df.wide <- pivot_wider(hennepin.df, names_from = "variable", values_from = c("estimate", "moe"))

hennepin.df.plotly <- hennepin.df.wide %>%
  mutate(
    text_label = str_c(
      NAME,
      "\nPoverty Level: ",
      round(estimate_B17017_001/estimate_B01003_001*100, 3),
      "%"
    )
  )
```

```{r henmap}
#ggplot of basemap
hen.base.gg <- ggmap(hen.basemap) +
  geom_polygon(data = henn.outline, aes(x = longitude, y = latitude), color = "black", linewidth = 2, alpha = 0.05) +
  theme_map()

#make ggplot using basemap
hennepin.gg <- hen.base.gg +
  geom_sf(data = hennepin.df.plotly, aes(fill = round(estimate_B17017_001/estimate_B01003_001, 4), text = text_label), inherit.aes = FALSE) +
  labs(title = "Estimated Poverty Rate by Census Block in Hennepin County",
       x = "Latitude",
       y = "Longitude") +
  viridis::scale_fill_viridis("Poverty Rate", labels = scales::percent) +
  theme_minimal()


ggplotly(hennepin.gg, tooltip = "text") %>%
  style(hoveron = "fills")
```